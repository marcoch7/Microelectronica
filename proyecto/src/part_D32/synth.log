Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `tt_counter.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `tt_counter.v' to AST representation.
Generating RTLIL representation for module `\counter'.
Generating RTLIL representation for module `\tt_counter'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \tt_counter
Used module:     \counter

3.1.2. Analyzing design hierarchy..
Top module:  \tt_counter
Used module:     \counter
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$counter.v:14$1 in module counter.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$counter.v:80$16'.
     1/1: $1\rco[0:0]
Creating decoders for process `\counter.$proc$counter.v:14$1'.
     1/3: $0\load[0:0]
     2/3: $0\rco[0:0]
     3/3: $0\Q[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\rco' using process `\counter.$proc$counter.v:80$16'.
  created $dff cell `$procdff$116' with negative edge clock.
Creating register for signal `\counter.\Q' using process `\counter.$proc$counter.v:14$1'.
  created $dff cell `$procdff$117' with positive edge clock.
Creating register for signal `\counter.\rco' using process `\counter.$proc$counter.v:14$1'.
  created $dff cell `$procdff$118' with positive edge clock.
Creating register for signal `\counter.\load' using process `\counter.$proc$counter.v:14$1'.
  created $dff cell `$procdff$119' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `counter.$proc$counter.v:80$16'.
Found and cleaned up 7 empty switches in `\counter.$proc$counter.v:14$1'.
Removing empty process `counter.$proc$counter.v:14$1'.
Cleaned up 7 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$tt_counter.v:36$19' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:36$19_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:36$20' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$tt_counter.v:37$25' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:37$25_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:37$26' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$tt_counter.v:38$31' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:38$31_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:38$32' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$tt_counter.v:39$37' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:39$37_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:39$38' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$tt_counter.v:40$43' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:40$43_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:40$44' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$tt_counter.v:41$49' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:41$49_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:41$50' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$tt_counter.v:42$55' (1) in module `\tt_counter' with constant driver `$eq$tt_counter.v:42$55_Y = \reset'.
Replacing $eq cell `$eq$tt_counter.v:42$56' in module `tt_counter' with inverter.
Replacing $eq cell `$eq$counter.v:20$2' in module `counter' with inverter.
Replacing $eq cell `$eq$counter.v:20$3' in module `counter' with inverter.
Replacing $eq cell `$eq$counter.v:44$8' in module `counter' with $logic_not.
Replacing $eq cell `$eq$counter.v:55$10' in module `counter' with $logic_not.
Replacing $eq cell `$procmux$72_CMP0' in module `counter' with $logic_not.
Replacing $eq cell `$procmux$95_CMP0' in module `counter' with $logic_not.
Replacing $eq cell `$procmux$109_CMP0' in module `counter' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tt_counter..
  removing unused non-port wire \rco_seven.
  removed 1 unused temporary wires.
Finding unused cells or wires in module \counter..

3.5. Executing CHECK pass (checking for obvious problems).
checking module counter..
Warning: multiple conflicting drivers for counter.\rco:
    port Q[0] of cell $procdff$116 ($dff)
    port Q[0] of cell $procdff$118 ($dff)
checking module tt_counter..
found and reported 1 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$eq$counter.v:55$10' is identical to cell `$eq$counter.v:44$8'.
    Redirecting output \Y: $eq$counter.v:55$10_Y = $eq$counter.v:44$8_Y
    Removing $logic_not cell `$eq$counter.v:55$10' from module `\counter'.
  Cell `$procmux$106_CMP0' is identical to cell `$eq$counter.v:22$5'.
    Redirecting output \Y: $procmux$106_CMP = $eq$counter.v:22$5_Y
    Removing $eq cell `$procmux$106_CMP0' from module `\counter'.
  Cell `$procmux$69_CMP0' is identical to cell `$eq$counter.v:22$5'.
    Redirecting output \Y: $procmux$69_CMP = $eq$counter.v:22$5_Y
    Removing $eq cell `$procmux$69_CMP0' from module `\counter'.
  Cell `$procmux$70_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$70_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$70_CMP0' from module `\counter'.
  Cell `$procmux$71_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$71_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$71_CMP0' from module `\counter'.
  Cell `$procmux$72_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$72_CMP = $procmux$109_CMP
    Removing $logic_not cell `$procmux$72_CMP0' from module `\counter'.
  Cell `$procmux$83_CMP0' is identical to cell `$eq$counter.v:22$5'.
    Redirecting output \Y: $procmux$83_CMP = $eq$counter.v:22$5_Y
    Removing $eq cell `$procmux$83_CMP0' from module `\counter'.
  Cell `$procmux$87_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$87_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$87_CMP0' from module `\counter'.
  Cell `$procmux$91_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$91_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$91_CMP0' from module `\counter'.
  Cell `$procmux$95_CMP0' is identical to cell `$procmux$109_CMP0'.
    Redirecting output \Y: $procmux$95_CMP = $procmux$109_CMP
    Removing $logic_not cell `$procmux$95_CMP0' from module `\counter'.
Finding identical cells in module `\tt_counter'.
  Cell `$eq$tt_counter.v:37$26' is identical to cell `$eq$tt_counter.v:36$20'.
    Redirecting output \Y: $eq$tt_counter.v:37$26_Y = $eq$tt_counter.v:36$20_Y
    Removing $not cell `$eq$tt_counter.v:37$26' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:37$28' is identical to cell `$eq$tt_counter.v:36$22'.
    Redirecting output \Y: $eq$tt_counter.v:37$28_Y = $eq$tt_counter.v:36$22_Y
    Removing $eq cell `$eq$tt_counter.v:37$28' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:38$32' is identical to cell `$eq$tt_counter.v:36$20'.
    Redirecting output \Y: $eq$tt_counter.v:38$32_Y = $eq$tt_counter.v:36$20_Y
    Removing $not cell `$eq$tt_counter.v:38$32' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:38$34' is identical to cell `$eq$tt_counter.v:36$22'.
    Redirecting output \Y: $eq$tt_counter.v:38$34_Y = $eq$tt_counter.v:36$22_Y
    Removing $eq cell `$eq$tt_counter.v:38$34' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:39$38' is identical to cell `$eq$tt_counter.v:36$20'.
    Redirecting output \Y: $eq$tt_counter.v:39$38_Y = $eq$tt_counter.v:36$20_Y
    Removing $not cell `$eq$tt_counter.v:39$38' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:39$40' is identical to cell `$eq$tt_counter.v:36$22'.
    Redirecting output \Y: $eq$tt_counter.v:39$40_Y = $eq$tt_counter.v:36$22_Y
    Removing $eq cell `$eq$tt_counter.v:39$40' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:40$44' is identical to cell `$eq$tt_counter.v:36$20'.
    Redirecting output \Y: $eq$tt_counter.v:40$44_Y = $eq$tt_counter.v:36$20_Y
    Removing $not cell `$eq$tt_counter.v:40$44' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:40$46' is identical to cell `$eq$tt_counter.v:36$22'.
    Redirecting output \Y: $eq$tt_counter.v:40$46_Y = $eq$tt_counter.v:36$22_Y
    Removing $eq cell `$eq$tt_counter.v:40$46' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:41$50' is identical to cell `$eq$tt_counter.v:36$20'.
    Redirecting output \Y: $eq$tt_counter.v:41$50_Y = $eq$tt_counter.v:36$20_Y
    Removing $not cell `$eq$tt_counter.v:41$50' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:41$52' is identical to cell `$eq$tt_counter.v:36$22'.
    Redirecting output \Y: $eq$tt_counter.v:41$52_Y = $eq$tt_counter.v:36$22_Y
    Removing $eq cell `$eq$tt_counter.v:41$52' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:42$56' is identical to cell `$eq$tt_counter.v:36$20'.
    Redirecting output \Y: $eq$tt_counter.v:42$56_Y = $eq$tt_counter.v:36$20_Y
    Removing $not cell `$eq$tt_counter.v:42$56' from module `\tt_counter'.
  Cell `$eq$tt_counter.v:42$58' is identical to cell `$eq$tt_counter.v:36$22'.
    Redirecting output \Y: $eq$tt_counter.v:42$58_Y = $eq$tt_counter.v:36$22_Y
    Removing $eq cell `$eq$tt_counter.v:42$58' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:37$27' is identical to cell `$logic_or$tt_counter.v:36$21'.
    Redirecting output \Y: $logic_or$tt_counter.v:37$27_Y = $logic_or$tt_counter.v:36$21_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:37$27' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:37$29' is identical to cell `$logic_or$tt_counter.v:36$23'.
    Redirecting output \Y: $logic_or$tt_counter.v:37$29_Y = $logic_or$tt_counter.v:36$23_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:37$29' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:38$33' is identical to cell `$logic_or$tt_counter.v:36$21'.
    Redirecting output \Y: $logic_or$tt_counter.v:38$33_Y = $logic_or$tt_counter.v:36$21_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:38$33' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:38$35' is identical to cell `$logic_or$tt_counter.v:36$23'.
    Redirecting output \Y: $logic_or$tt_counter.v:38$35_Y = $logic_or$tt_counter.v:36$23_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:38$35' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:39$39' is identical to cell `$logic_or$tt_counter.v:36$21'.
    Redirecting output \Y: $logic_or$tt_counter.v:39$39_Y = $logic_or$tt_counter.v:36$21_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:39$39' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:39$41' is identical to cell `$logic_or$tt_counter.v:36$23'.
    Redirecting output \Y: $logic_or$tt_counter.v:39$41_Y = $logic_or$tt_counter.v:36$23_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:39$41' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:40$45' is identical to cell `$logic_or$tt_counter.v:36$21'.
    Redirecting output \Y: $logic_or$tt_counter.v:40$45_Y = $logic_or$tt_counter.v:36$21_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:40$45' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:40$47' is identical to cell `$logic_or$tt_counter.v:36$23'.
    Redirecting output \Y: $logic_or$tt_counter.v:40$47_Y = $logic_or$tt_counter.v:36$23_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:40$47' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:41$51' is identical to cell `$logic_or$tt_counter.v:36$21'.
    Redirecting output \Y: $logic_or$tt_counter.v:41$51_Y = $logic_or$tt_counter.v:36$21_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:41$51' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:41$53' is identical to cell `$logic_or$tt_counter.v:36$23'.
    Redirecting output \Y: $logic_or$tt_counter.v:41$53_Y = $logic_or$tt_counter.v:36$23_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:41$53' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:42$57' is identical to cell `$logic_or$tt_counter.v:36$21'.
    Redirecting output \Y: $logic_or$tt_counter.v:42$57_Y = $logic_or$tt_counter.v:36$21_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:42$57' from module `\tt_counter'.
  Cell `$logic_or$tt_counter.v:42$59' is identical to cell `$logic_or$tt_counter.v:36$23'.
    Redirecting output \Y: $logic_or$tt_counter.v:42$59_Y = $logic_or$tt_counter.v:36$23_Y
    Removing $logic_or cell `$logic_or$tt_counter.v:42$59' from module `\tt_counter'.
Removed a total of 34 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$103 (pure)
    Root of a mux tree: $procmux$114 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \tt_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$tt_counter.v:33$18 (pure)
    Root of a mux tree: $ternary$tt_counter.v:36$24 (pure)
    Root of a mux tree: $ternary$tt_counter.v:37$30 (pure)
    Root of a mux tree: $ternary$tt_counter.v:38$36 (pure)
    Root of a mux tree: $ternary$tt_counter.v:39$42 (pure)
    Root of a mux tree: $ternary$tt_counter.v:40$48 (pure)
    Root of a mux tree: $ternary$tt_counter.v:41$54 (pure)
    Root of a mux tree: $ternary$tt_counter.v:42$60 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
    New ctrl vector for $pmux cell $procmux$68: { $auto$opt_reduce.cc:132:opt_mux$121 $eq$counter.v:22$5_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$120: { $procmux$107_CMP $procmux$108_CMP $procmux$109_CMP }
  Optimizing cells in module \counter.
  Optimizing cells in module \tt_counter.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$116 ($dff) from module counter.
Replaced 1 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing unused `$eq' cell `$eq$counter.v:33$6'.
  removing unused `$logic_not' cell `$eq$counter.v:44$8'.
  removing unused `$eq' cell `$eq$counter.v:55$11'.
  removing unused `$or' cell `$or$counter.v:55$12'.
  removing unused `$eq' cell `$eq$counter.v:55$13'.
  removing unused `$or' cell `$or$counter.v:55$14'.
  removing unused `$pmux' cell `$procmux$82'.
  removing unused `$mux' cell `$procmux$85'.
  removing unused `$mux' cell `$procmux$89'.
  removing unused `$mux' cell `$procmux$93'.
  removing unused `$mux' cell `$procmux$98'.
  removing unused `$mux' cell `$procmux$100'.
  removing unused `$mux' cell `$procmux$103'.
  removing unused `$dff' cell `$procdff$118'.
Finding unused cells or wires in module \tt_counter..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$114 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \tt_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$tt_counter.v:33$18 (pure)
    Root of a mux tree: $ternary$tt_counter.v:36$24 (pure)
    Root of a mux tree: $ternary$tt_counter.v:37$30 (pure)
    Root of a mux tree: $ternary$tt_counter.v:38$36 (pure)
    Root of a mux tree: $ternary$tt_counter.v:39$42 (pure)
    Root of a mux tree: $ternary$tt_counter.v:40$48 (pure)
    Root of a mux tree: $ternary$tt_counter.v:41$54 (pure)
    Root of a mux tree: $ternary$tt_counter.v:42$60 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \tt_counter.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell counter.$add$counter.v:40$7 ($add).
Removed top 28 bits (of 32) from port Y of cell counter.$add$counter.v:40$7 ($add).
Removed top 31 bits (of 32) from port B of cell counter.$sub$counter.v:51$9 ($sub).
Removed top 28 bits (of 32) from port Y of cell counter.$sub$counter.v:51$9 ($sub).
Removed top 30 bits (of 32) from port B of cell counter.$sub$counter.v:62$15 ($sub).
Removed top 28 bits (of 32) from port Y of cell counter.$sub$counter.v:62$15 ($sub).
Removed top 1 bits (of 2) from port B of cell counter.$procmux$108_CMP0 ($eq).
Removed top 28 bits (of 32) from wire counter.$add$counter.v:40$7_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter:
  creating $macc model for $add$counter.v:40$7 ($add).
  creating $macc model for $sub$counter.v:51$9 ($sub).
  creating $macc model for $sub$counter.v:62$15 ($sub).
  creating $alu model for $macc $sub$counter.v:62$15.
  creating $alu model for $macc $sub$counter.v:51$9.
  creating $alu model for $macc $add$counter.v:40$7.
  creating $alu cell for $add$counter.v:40$7: $auto$alumacc.cc:470:replace_alu$123
  creating $alu cell for $sub$counter.v:51$9: $auto$alumacc.cc:470:replace_alu$126
  creating $alu cell for $sub$counter.v:62$15: $auto$alumacc.cc:470:replace_alu$129
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module tt_counter:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$114 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \tt_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$tt_counter.v:33$18 (pure)
    Root of a mux tree: $ternary$tt_counter.v:36$24 (pure)
    Root of a mux tree: $ternary$tt_counter.v:37$30 (pure)
    Root of a mux tree: $ternary$tt_counter.v:38$36 (pure)
    Root of a mux tree: $ternary$tt_counter.v:39$42 (pure)
    Root of a mux tree: $ternary$tt_counter.v:40$48 (pure)
    Root of a mux tree: $ternary$tt_counter.v:41$54 (pure)
    Root of a mux tree: $ternary$tt_counter.v:42$60 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \tt_counter.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$75' (mux_bool) in module `\counter' with constant driver `$procmux$75_Y = $eq$counter.v:22$5_Y'.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$114 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \tt_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$tt_counter.v:33$18 (pure)
    Root of a mux tree: $ternary$tt_counter.v:36$24 (pure)
    Root of a mux tree: $ternary$tt_counter.v:37$30 (pure)
    Root of a mux tree: $ternary$tt_counter.v:38$36 (pure)
    Root of a mux tree: $ternary$tt_counter.v:39$42 (pure)
    Root of a mux tree: $ternary$tt_counter.v:40$48 (pure)
    Root of a mux tree: $ternary$tt_counter.v:41$54 (pure)
    Root of a mux tree: $ternary$tt_counter.v:42$60 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \tt_counter.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping counter.$eq$counter.v:20$2 ($not) with simplemap.
Mapping counter.$eq$counter.v:20$3 ($not) with simplemap.
Mapping counter.$logic_and$counter.v:20$4 ($logic_and) with simplemap.
Mapping counter.$eq$counter.v:22$5 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4'.

3.18.3. Continuing TECHMAP pass.
Mapping counter.$auto$alumacc.cc:470:replace_alu$126 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 2
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=2\Y_WIDTH=4'.

3.18.5. Continuing TECHMAP pass.
Mapping counter.$auto$alumacc.cc:470:replace_alu$129 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=2\Y_WIDTH=4.
Mapping counter.$auto$opt_reduce.cc:126:opt_mux$120 ($reduce_or) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.7. Continuing TECHMAP pass.
Mapping counter.$procmux$68 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping counter.$procmux$77 ($mux) with simplemap.
Mapping counter.$procmux$80 ($mux) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4'.

3.18.9. Continuing TECHMAP pass.
Mapping counter.$auto$alumacc.cc:470:replace_alu$123 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=4'.

3.18.11. Continuing TECHMAP pass.
Mapping counter.$procmux$105 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=4.
Mapping counter.$procmux$107_CMP0 ($eq) with simplemap.
Mapping counter.$procmux$108_CMP0 ($eq) with simplemap.
Mapping counter.$procmux$109_CMP0 ($logic_not) with simplemap.
Mapping counter.$procmux$111 ($mux) with simplemap.
Mapping counter.$procmux$114 ($mux) with simplemap.
Mapping counter.$procdff$117 ($dff) with simplemap.
Mapping counter.$procdff$119 ($dff) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:262$192 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:263$193 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.$and$<techmap.v>:260$191 ($and) with simplemap.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=4'.

3.18.13. Executing PROC pass (convert processes to netlists).

3.18.13.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.13.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.13.3. Executing PROC_INIT pass (extract init attributes).

3.18.13.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.13.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$282'.
     1/8: $0\p[3:0] [2]
     2/8: $0\g[3:0] [2]
     3/8: $0\p[3:0] [3]
     4/8: $0\g[3:0] [3]
     5/8: $0\p[3:0] [1]
     6/8: $0\g[3:0] [1]
     7/8: $0\g[3:0] [0]
     8/8: $0\p[3:0] [0]

3.18.13.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\p' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$282'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\g' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$282'.

3.18.13.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.13.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$282'.
Cleaned up 0 empty switches.

3.18.14. Executing OPT pass (performing simple optimizations).

3.18.14.1. Executing OPT_EXPR pass (perform const folding).

3.18.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=4'.
Removed a total of 0 cells.

3.18.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=4..
  removing unused `$and' cell `$and$<techmap.v>:222$287'.
  removing unused `$and' cell `$and$<techmap.v>:222$293'.
  removing unused `$and' cell `$and$<techmap.v>:230$296'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.14.5. Finished fast OPT passes.

3.18.15. Continuing TECHMAP pass.
Mapping counter.$auto$alumacc.cc:470:replace_alu$126.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.$ternary$<techmap.v>:258$190 ($mux) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.$not$<techmap.v>:258$189 ($not) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$126.B_conv ($pos) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$126.A_conv ($pos) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:262$197 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:263$198 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.$and$<techmap.v>:260$196 ($and) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$129.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.$ternary$<techmap.v>:258$195 ($mux) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.$not$<techmap.v>:258$194 ($not) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$129.B_conv ($pos) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$129.A_conv ($pos) with simplemap.
Mapping counter.$techmap$procmux$68.$and$<techmap.v>:434$206 ($and) with simplemap.
Mapping counter.$techmap$procmux$68.$reduce_or$<techmap.v>:441$207 ($reduce_or) with simplemap.
Mapping counter.$techmap$procmux$68.$and$<techmap.v>:434$205 ($and) with simplemap.
Mapping counter.$techmap$procmux$68.$ternary$<techmap.v>:445$204 ($mux) with simplemap.
Mapping counter.$techmap$procmux$68.$reduce_or$<techmap.v>:445$203 ($reduce_or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:262$213 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:263$214 ($xor) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.$and$<techmap.v>:260$212 ($and) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$123.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.$ternary$<techmap.v>:258$211 ($mux) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.$not$<techmap.v>:258$210 ($not) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$123.B_conv ($pos) with simplemap.
Mapping counter.$auto$alumacc.cc:470:replace_alu$123.A_conv ($pos) with simplemap.
Mapping counter.$techmap$procmux$105.$reduce_or$<techmap.v>:441$223 ($reduce_or) with simplemap.
Mapping counter.$techmap$procmux$105.$reduce_or$<techmap.v>:441$224 ($reduce_or) with simplemap.
Mapping counter.$techmap$procmux$105.$reduce_or$<techmap.v>:441$222 ($reduce_or) with simplemap.
Mapping counter.$techmap$procmux$105.$reduce_or$<techmap.v>:441$221 ($reduce_or) with simplemap.
Mapping counter.$techmap$procmux$105.$and$<techmap.v>:434$220 ($and) with simplemap.
Mapping counter.$techmap$procmux$105.$and$<techmap.v>:434$219 ($and) with simplemap.
Mapping counter.$techmap$procmux$105.$and$<techmap.v>:434$218 ($and) with simplemap.
Mapping counter.$techmap$procmux$105.$and$<techmap.v>:434$217 ($and) with simplemap.
Mapping counter.$techmap$procmux$105.$ternary$<techmap.v>:445$216 ($mux) with simplemap.
Mapping counter.$techmap$procmux$105.$reduce_or$<techmap.v>:445$215 ($reduce_or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$or$<techmap.v>:229$295 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$or$<techmap.v>:221$292 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$or$<techmap.v>:221$289 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$or$<techmap.v>:221$286 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$or$<techmap.v>:212$284 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:229$294 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:222$290 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:221$291 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:221$288 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:221$285 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:212$283 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:212$283 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:221$285 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:221$288 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:221$291 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:222$290 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:229$294 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$or$<techmap.v>:212$284 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$or$<techmap.v>:221$286 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$or$<techmap.v>:221$289 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$or$<techmap.v>:221$292 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$or$<techmap.v>:229$295 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:212$283 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$285 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$288 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$291 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:222$290 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:229$294 ($and) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$or$<techmap.v>:212$284 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$or$<techmap.v>:221$286 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$or$<techmap.v>:221$289 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$or$<techmap.v>:221$292 ($or) with simplemap.
Mapping counter.$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$or$<techmap.v>:229$295 ($or) with simplemap.
Mapping tt_counter.$eq$tt_counter.v:33$17 ($eq) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:33$18 ($mux) with simplemap.
Mapping tt_counter.$eq$tt_counter.v:36$20 ($not) with simplemap.
Mapping tt_counter.$logic_or$tt_counter.v:36$21 ($logic_or) with simplemap.
Mapping tt_counter.$eq$tt_counter.v:36$22 ($eq) with simplemap.
Mapping tt_counter.$logic_or$tt_counter.v:36$23 ($logic_or) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:36$24 ($mux) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:37$30 ($mux) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:38$36 ($mux) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:39$42 ($mux) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:40$48 ($mux) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:41$54 ($mux) with simplemap.
Mapping tt_counter.$ternary$tt_counter.v:42$60 ($mux) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$61 ($logic_and) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$62 ($logic_and) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$63 ($logic_and) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$64 ($logic_and) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$65 ($logic_and) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$66 ($logic_and) with simplemap.
Mapping tt_counter.$logic_and$tt_counter.v:45$67 ($logic_and) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$304' (0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$not$<techmap.v>:258$189_Y [3] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$303' (0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$not$<techmap.v>:258$189_Y [2] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$302' (0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$not$<techmap.v>:258$189_Y [1] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$301' (1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$not$<techmap.v>:258$189_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$297' (101) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$ternary$<techmap.v>:258$190_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$261' (?0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:262$192_Y [0] = \Q [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$238' (?0) in module `\counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$235 [1] = \mode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$227' (?0) in module `\counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$225 [0] = \mode [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$326' (const_and) in module `\counter' with constant driver `$techmap$procmux$68.$and$<techmap.v>:434$206_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$329' (1?) in module `\counter' with constant driver `$techmap$procmux$68.$and$<techmap.v>:434$205_Y = $eq$counter.v:22$5_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$328' (?0) in module `\counter' with constant driver `$techmap$procmux$68.$reduce_or$<techmap.v>:441$207_Y = $eq$counter.v:22$5_Y'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$322' (1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$not$<techmap.v>:258$194_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$318' (101) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$ternary$<techmap.v>:258$195_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$305' (?0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:262$197_Y [0] = \Q [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$346' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$ternary$<techmap.v>:258$211_Y [0] = \Q [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$337' (?0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:263$214_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:262$213_Y [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$323' (1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$not$<techmap.v>:258$194_Y [1] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$319' (101) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$ternary$<techmap.v>:258$195_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$306' (?0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:262$197_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$314' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$and$<techmap.v>:260$196_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$410' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:212$283_Y = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$416' (0?) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$131 [0] = \Q [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$347' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$ternary$<techmap.v>:258$211_Y [1] = \Q [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$334' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:262$213_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$342' (1?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$and$<techmap.v>:260$212_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$421' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:212$283_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$427' (?0) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$125 [0] = \Q [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$298' (011) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$ternary$<techmap.v>:258$190_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$270' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$and$<techmap.v>:260$191_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$409' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:212$283_Y = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$403' (0?) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$128 [0] = \Q [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$324' (0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$not$<techmap.v>:258$194_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$320' (011) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$ternary$<techmap.v>:258$195_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$315' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$and$<techmap.v>:260$196_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$417' (0?) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$131 [1] = $techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:221$285_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$348' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$ternary$<techmap.v>:258$211_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$335' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:262$213_Y [2] = \Q [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$343' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$and$<techmap.v>:260$212_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$428' (0?) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$125 [1] = $techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$285_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$299' (011) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$ternary$<techmap.v>:258$190_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$271' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$and$<techmap.v>:260$191_Y [1] = \Q [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$325' (0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$not$<techmap.v>:258$194_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$321' (011) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$ternary$<techmap.v>:258$195_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$316' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$and$<techmap.v>:260$196_Y [2] = \Q [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$349' (??0) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$ternary$<techmap.v>:258$211_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$336' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:262$213_Y [3] = \Q [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$344' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$and$<techmap.v>:260$212_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$431' (0?) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$125 [2] = $techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:229$294_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$300' (011) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$ternary$<techmap.v>:258$190_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$272' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$and$<techmap.v>:260$191_Y [2] = \Q [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$273' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$and$<techmap.v>:260$191_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$269' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:263$193_Y [4] = $auto$alumacc.cc:484:replace_alu$128 [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$317' (?1) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$and$<techmap.v>:260$196_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$313' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:263$198_Y [4] = $auto$alumacc.cc:484:replace_alu$131 [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$345' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$and$<techmap.v>:260$212_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$423' (const_and) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$288_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$429' (00) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$or$<techmap.v>:221$289_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$430' (0?) in module `\counter' with constant driver `$auto$alumacc.cc:484:replace_alu$125 [3] = $techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$291_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$341' (0?) in module `\counter' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:263$214_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$291_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$434' (?0) in module `\tt_counter' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$432 [0] = \mode [0]'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$442' in module `tt_counter'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$443' in module `tt_counter'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$422' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$411'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$123.lcu.$and$<techmap.v>:221$285_Y = $techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:221$285_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$422' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$265' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$309'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:263$193_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:263$198_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$265' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$263' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$307'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:262$192_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:262$197_Y [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$263' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$338' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$310'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:263$214_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:263$198_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$338' from module `\counter'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$396' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$200'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$394 [1] = $auto$simplemap.cc:127:simplemap_reduce$199
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$396' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$333' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$309'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$123.$xor$<techmap.v>:262$213_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:263$198_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$333' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$264' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$308'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$126.$xor$<techmap.v>:262$192_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$129.$xor$<techmap.v>:262$197_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$264' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$181' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$237'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$179 [0] = $auto$simplemap.cc:250:simplemap_eqne$235 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$181' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$182' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$228'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$179 [1] = $auto$simplemap.cc:250:simplemap_eqne$225 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$182' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$412' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$407'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:221$288_Y = $techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:221$288_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$412' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$418' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$or$<techmap.v>:221$289_Y = $techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$or$<techmap.v>:221$289_Y
    Removing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$418' from module `\counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$414' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$405'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$129.lcu.$and$<techmap.v>:222$290_Y = $techmap$auto$alumacc.cc:470:replace_alu$126.lcu.$and$<techmap.v>:222$290_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$414' from module `\counter'.
Finding identical cells in module `\tt_counter'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$435' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$449'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$432 [1] = $auto$simplemap.cc:250:simplemap_eqne$446 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$435' from module `\tt_counter'.
Removed a total of 13 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$350'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$351'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$352'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$353'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$400'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$401'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$405'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$406'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$407'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$413'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$419'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$424'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$425'.
Finding unused cells or wires in module \tt_counter..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:206:simplemap_lognot$441'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 81 gates and 96 wires to a netlist network with 13 inputs and 5 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:        2
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:        5
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:       78
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        5
Removing temp directory.

3.20.2. Extracting gate netlist of module `\tt_counter' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 20 inputs and 10 outputs.

3.20.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        9
ABC RESULTS:               MUX cells:        7
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$abc$471$auto$blifparse.cc:286:parse_blif$480' is identical to cell `$abc$471$auto$blifparse.cc:286:parse_blif$473'.
    Redirecting output \Y: $abc$471$n27 = $abc$471$n20
    Removing $_AND_ cell `$abc$471$auto$blifparse.cc:286:parse_blif$480' from module `\counter'.
  Cell `$abc$471$auto$blifparse.cc:286:parse_blif$510' is identical to cell `$abc$471$auto$blifparse.cc:286:parse_blif$508'.
    Redirecting output \Y: $abc$471$n57 = $abc$471$n55
    Removing $_XOR_ cell `$abc$471$auto$blifparse.cc:286:parse_blif$510' from module `\counter'.
Finding identical cells in module `\tt_counter'.
  Cell `$abc$528$auto$blifparse.cc:286:parse_blif$538' is identical to cell `$abc$528$auto$blifparse.cc:286:parse_blif$537'.
    Redirecting output \Y: $abc$528$n40_1 = $abc$528$n29
    Removing $_AND_ cell `$abc$528$auto$blifparse.cc:286:parse_blif$538' from module `\tt_counter'.
Removed a total of 3 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \tt_counter
Used module:     \counter

3.22.2. Analyzing design hierarchy..
Top module:  \tt_counter
Used module:     \counter
Removed 0 unused modules.

3.23. Printing statistics.

=== counter ===

   Number of wires:                 59
   Number of wire bits:             69
   Number of public wires:           8
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_AND_                         12
     $_AOI3_                         3
     $_AOI4_                         2
     $_DFF_P_                        5
     $_MUX_                          2
     $_NAND_                         4
     $_NOR_                          5
     $_NOT_                          7
     $_OAI3_                         6
     $_OAI4_                         1
     $_OR_                           5
     $_XNOR_                         1
     $_XOR_                          6

=== tt_counter ===

   Number of wires:                 47
   Number of wire bits:            111
   Number of public wires:          38
   Number of public wire bits:     102
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_AND_                          8
     $_MUX_                          7
     $_NAND_                         1
     $_NOT_                          1
     $_OR_                           2
     counter                         8

=== design hierarchy ===

   tt_counter                        1
     counter                         8

   Number of wires:                519
   Number of wire bits:            663
   Number of public wires:         102
   Number of public wire bits:     222
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                491
     $_AND_                        104
     $_AOI3_                        24
     $_AOI4_                        16
     $_DFF_P_                       40
     $_MUX_                         23
     $_NAND_                        33
     $_NOR_                         40
     $_NOT_                         57
     $_OAI3_                        48
     $_OAI4_                         8
     $_OR_                          42
     $_XNOR_                         8
     $_XOR_                         48

3.24. Executing CHECK pass (checking for obvious problems).
checking module counter..
checking module tt_counter..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\counter':
  mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\tt_counter':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \tt_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \tt_counter.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \tt_counter..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 54 gates and 66 wires to a netlist network with 12 inputs and 5 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND2X1 cells:        6
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:       49
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        5
Removing temp directory.

6.2. Extracting gate netlist of module `\tt_counter' to `<abc-temp-dir>/input.blif'..
Extracted 19 gates and 39 wires to a netlist network with 20 inputs and 10 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:             INVX1 cells:       11
ABC RESULTS:           NAND2X1 cells:        3
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        7
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping tt_counter.counter_zero using counter.
Mapping tt_counter.counter_one using counter.
Mapping tt_counter.counter_two using counter.
Mapping tt_counter.counter_three using counter.
Mapping tt_counter.counter_four using counter.
Mapping tt_counter.counter_five using counter.
Mapping tt_counter.counter_six using counter.
Mapping tt_counter.counter_seven using counter.
No more expansions possible.
Deleting now unused module counter.
Removed 0 unused cells and 645 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port tt_counter.D_32b: Missing option -inpad.
Mapping port tt_counter.Q_32b using BUFX2.
Don't map input port tt_counter.clk: Missing option -inpad.
Don't map input port tt_counter.enable: Missing option -inpad.
Mapping port tt_counter.load_32b using BUFX2.
Don't map input port tt_counter.mode: Missing option -inpad.
Mapping port tt_counter.rco_32b using BUFX2.
Don't map input port tt_counter.reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tt_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tt_counter.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tt_counter'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tt_counter..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 73c3cfc1a3
CPU: user 0.36s system 0.02s, MEM: 37.76 MB total, 10.82 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 16% 16x opt_clean (0 sec), 11% 17x opt_expr (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 28 (load 671.427) from node counter_five.mode<0>,
driven by NAND2X1 with strength 165.779 (fF driven at latency 300)
Top fanout load-to-strength ratio is 4.05014 (latency = 1215.04 ps)
Top input node fanout is 9 (load 271.065) from node reset.
Warning 1: load of 681.427 is 4.11046 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
26 gates exceed specified minimum load.
9 buffers were added.
1 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 377    	Out: 376    	-1
	"2" gates	In: 52    	Out: 52    	+0

gates resized: 10
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 8 (load 576.413) from node _9_,
driven by NAND3X1 with strength 164.544 (fF driven at latency 300)
Top fanout load-to-strength ratio is 1.72094 (latency = 516.281 ps)
Top input node fanout is 9 (load 271.065) from node reset.
Warning 1: load of 293.17 is 1.78171 times greater than strongest gate NAND3X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
25 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 376    	Out: 376    	+0
	"2" gates	In: 61    	Out: 61    	+0
	"4" gates	In: 1    	Out: 1    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis
Files:
   Verilog: /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.rtl.v
   Verilog: /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.rtlnopwr.v
   Spice:   /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on dom 6 dic 17:58:47 CST 2020
Running blif2cel.tcl
Loaded LEF file (/usr/share/qflow/tech/osu050/osu050_stdcells.lef) for reading...
Loaded BLIF file (/home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.blif) for reading ...
Loaded CEL file (/home/marcoch7/Microelectronica/proyecto/part_D32/layout/tt_counter.cel) for writing...
1st pass of blif file /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.blif. . .
Reading macros from LEF file. . .
Parsing macro AND2X2:  Ports are:
parse_pin
macroname: AND2X2, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: AND2X2, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: AND2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AND2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AND2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI21X1:  Ports are:
parse_pin
macroname: AOI21X1, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: AOI21X1, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: AOI21X1, pinname: C
Port type: INPUT 
C 360 -750 1
parse_pin
macroname: AOI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AOI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AOI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI22X1:  Ports are:
parse_pin
macroname: AOI22X1, pinname: A
Port type: INPUT 
A -480 -150 1
parse_pin
macroname: AOI22X1, pinname: B
Port type: INPUT 
B -240 -450 1
parse_pin
macroname: AOI22X1, pinname: C
Port type: INPUT 
C 479 -150 1
parse_pin
macroname: AOI22X1, pinname: D
Port type: INPUT 
D 240 -450 1
parse_pin
macroname: AOI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: AOI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: AOI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX2:  Ports are:
parse_pin
macroname: BUFX2, pinname: A
Port type: INPUT 
A -240 -150 1
parse_pin
macroname: BUFX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: BUFX2, pinname: Y
Port type: OUTPUT 
Y 240 -450 1
parse_pin
macroname: BUFX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro DFFPOSX1:  Ports are:
parse_pin
macroname: DFFPOSX1, pinname: Q
Port type: OUTPUT 
Q 1320 -150 1
parse_pin
macroname: DFFPOSX1, pinname: CLK
Port type: INPUT 
CLK -1080 -450 1
parse_pin
macroname: DFFPOSX1, pinname: D
Port type: INPUT 
D -361 -150 1
parse_pin
macroname: DFFPOSX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: DFFPOSX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX1:  Ports are:
parse_pin
macroname: INVX1, pinname: A
Port type: INPUT 
A -120 -750 1
parse_pin
macroname: INVX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX1, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: INVX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX4:  Ports are:
parse_pin
macroname: INVX4, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: INVX4, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX4, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: INVX4, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND2X1:  Ports are:
parse_pin
macroname: NAND2X1, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: NAND2X1, pinname: B
Port type: INPUT 
B 240 150 1
parse_pin
macroname: NAND2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NAND2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: NAND2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND3X1:  Ports are:
parse_pin
macroname: NAND3X1, pinname: A
Port type: INPUT 
A -360 150 1
parse_pin
macroname: NAND3X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: NAND3X1, pinname: C
Port type: INPUT 
C 120 449 1
parse_pin
macroname: NAND3X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: NAND3X1, pinname: Y
Port type: OUTPUT 
Y 360 150 1
parse_pin
macroname: NAND3X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro NOR2X1:  Ports are:
parse_pin
macroname: NOR2X1, pinname: A
Port type: INPUT 
A -240 -750 1
parse_pin
macroname: NOR2X1, pinname: B
Port type: INPUT 
B 240 -150 1
parse_pin
macroname: NOR2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: NOR2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro OAI21X1:  Ports are:
parse_pin
macroname: OAI21X1, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: OAI21X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: OAI21X1, pinname: C
Port type: INPUT 
C 360 150 1
parse_pin
macroname: OAI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OAI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -450 1
parse_pin
macroname: OAI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro XOR2X1:  Ports are:
parse_pin
macroname: XOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: XOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro XNOR2X1:  Ports are:
parse_pin
macroname: XNOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XNOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XNOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XNOR2X1, pinname: Y
Port type: OUTPUT 
Y 239 -150 1
parse_pin
macroname: XNOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No tt_counter.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

Read   50 objects so far...
Read  100 objects so far...
Read  150 objects so far...
Read  200 objects so far...
Read  250 objects so far...
Read  300 objects so far...
Read  350 objects so far...
Read  400 objects so far...
Read  450 objects so far...
Read  500 objects so far...
No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :438
Total cell width   :4.52e+05
Total cell height  :1.31e+06
Total cell area    :1.36e+09
Total core area    :1.36e+09
Average cell height:3.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Read   50 objects so far...
Read  100 objects so far...
Read  150 objects so far...
Read  200 objects so far...
Read  250 objects so far...
Read  300 objects so far...
Read  350 objects so far...
Read  400 objects so far...
Read  450 objects so far...
Read  500 objects so far...
Splitting tt_counter.cel into tt_counter.scel and tt_counter.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]

ERROR[check_pin]:the pin <clk> assigned to cell <twpin_clk> is
outside the cell's bounding box:
	cell l:-100 r:100 b:-2147483568 t:2147483568  pin x:0 y:-2147483648


TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University

TimberWolfSC terminated abnormally with 1 error[s] and 0 warning[s]


twflow terminated abnormally with 1 error[s] and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -645.0 ybot = -495.0 xtop = 45525.0 ytop = 30195.0
Core values: 120.0 150.0 45720.0 30150.0
Offsets: 120.0 150.0
3 routing layers
103 horizontal tracks from -300.0 to 30600.0 step 300 (M1, M3, ...)
194 vertical tracks from -480.0 to 46080.0 step 240.0 (M2, M4, ...)
Caught GrayWolf being bad:  Pin D_32b<25> overlaps pin D_32b<24>
Caught GrayWolf being bad:  Pin Q_32b<27> overlaps pin Q_32b<26>
Caught GrayWolf being bad:  Pin Q_32b<31> overlaps pin D_32b<29>
Done with place2def.tcl
Running addspacers.tcl  tt_counter /usr/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file tt_counter.def. . .
Number of rows is 10
Longest row has width 457.2 um
Analysis of DEF file:
Number of components = 438
New number of components = 454
Number of rows = 10
Done with addspacers.tcl
Running blifanno.tcl
Reading DEF file tt_counter.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis
Files:
   Verilog: /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.rtl.v
   Verilog: /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.rtlnopwr.v
   Spice:   /home/marcoch7/Microelectronica/proyecto/part_D32/synthesis/tt_counter.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on dom 6 dic 17:58:48 CST 2020
----------------------------------------------
Vesta static timing analysis tool
(c) 2013-2017 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu05_stdcells"
End of library at line 6606
Parsing module "tt_counter"
Lib Read:  Processed 6607 lines.
Verilog netlist read:  Processed 454 lines.
Number of paths analyzed:  120

Top 20 maximum delay paths:
Path DFFPOSX1_16/CLK to DFFPOSX1_19/D delay 1539.94 ps
Path DFFPOSX1_21/CLK to DFFPOSX1_24/D delay 1539.94 ps
Path DFFPOSX1_1/CLK to DFFPOSX1_4/D delay 1539.94 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_9/D delay 1539.94 ps
Path DFFPOSX1_26/CLK to DFFPOSX1_29/D delay 1539.94 ps
Path DFFPOSX1_31/CLK to DFFPOSX1_34/D delay 1539.94 ps
Path DFFPOSX1_11/CLK to DFFPOSX1_14/D delay 1539.94 ps
Path DFFPOSX1_36/CLK to DFFPOSX1_39/D delay 1539.94 ps
Path DFFPOSX1_16/CLK to DFFPOSX1_18/D delay 1536.46 ps
Path DFFPOSX1_21/CLK to DFFPOSX1_23/D delay 1536.46 ps
Path DFFPOSX1_1/CLK to DFFPOSX1_3/D delay 1536.46 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_8/D delay 1536.46 ps
Path DFFPOSX1_26/CLK to DFFPOSX1_28/D delay 1536.46 ps
Path DFFPOSX1_31/CLK to DFFPOSX1_33/D delay 1536.46 ps
Path DFFPOSX1_11/CLK to DFFPOSX1_13/D delay 1536.46 ps
Path DFFPOSX1_36/CLK to DFFPOSX1_38/D delay 1536.46 ps
Path DFFPOSX1_17/CLK to DFFPOSX1_19/D delay 1516.03 ps
Path DFFPOSX1_22/CLK to DFFPOSX1_24/D delay 1516.03 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_4/D delay 1516.03 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_9/D delay 1516.03 ps
Computed maximum clock frequency (zero slack) = 649.376 MHz
-----------------------------------------

Number of paths analyzed:  120

Top 20 minimum delay paths:
Path DFFPOSX1_38/CLK to output pin Q_32b[2] delay 458.904 ps
Path DFFPOSX1_13/CLK to output pin Q_32b[6] delay 458.904 ps
Path DFFPOSX1_33/CLK to output pin Q_32b[10] delay 458.904 ps
Path DFFPOSX1_28/CLK to output pin Q_32b[14] delay 458.904 ps
Path DFFPOSX1_8/CLK to output pin Q_32b[18] delay 458.904 ps
Path DFFPOSX1_3/CLK to output pin Q_32b[22] delay 458.904 ps
Path DFFPOSX1_23/CLK to output pin Q_32b[26] delay 458.904 ps
Path DFFPOSX1_18/CLK to output pin Q_32b[30] delay 458.904 ps
Path DFFPOSX1_39/CLK to output pin Q_32b[3] delay 484.266 ps
Path DFFPOSX1_14/CLK to output pin Q_32b[7] delay 484.266 ps
Path DFFPOSX1_34/CLK to output pin Q_32b[11] delay 484.266 ps
Path DFFPOSX1_29/CLK to output pin Q_32b[15] delay 484.266 ps
Path DFFPOSX1_9/CLK to output pin Q_32b[19] delay 484.266 ps
Path DFFPOSX1_4/CLK to output pin Q_32b[23] delay 484.266 ps
Path DFFPOSX1_24/CLK to output pin Q_32b[27] delay 484.266 ps
Path DFFPOSX1_19/CLK to output pin Q_32b[31] delay 484.266 ps
Path DFFPOSX1_36/CLK to output pin Q_32b[0] delay 490.113 ps
Path DFFPOSX1_11/CLK to output pin Q_32b[4] delay 490.113 ps
Path DFFPOSX1_31/CLK to output pin Q_32b[8] delay 490.113 ps
Path DFFPOSX1_26/CLK to output pin Q_32b[12] delay 490.113 ps
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  364

Top 20 maximum delay paths:
Path input pin mode[1] to DFFPOSX1_11/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_12/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_13/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_14/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_15/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_31/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_32/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_33/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_34/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_35/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_26/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_27/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_28/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_29/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_30/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_6/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_7/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_8/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_9/CLK delay 1964.2 ps
Path input pin mode[1] to DFFPOSX1_10/CLK delay 1964.2 ps
-----------------------------------------

Number of paths analyzed:  364

Top 20 minimum delay paths:
Path input pin clk to DFFPOSX1_40/CLK delay 0 ps
Path input pin clk to DFFPOSX1_39/CLK delay 0 ps
Path input pin clk to DFFPOSX1_38/CLK delay 0 ps
Path input pin clk to DFFPOSX1_37/CLK delay 0 ps
Path input pin clk to DFFPOSX1_36/CLK delay 0 ps
Path input pin D_32b[29] to DFFPOSX1_17/D delay 192.717 ps
Path input pin D_32b[25] to DFFPOSX1_22/D delay 192.717 ps
Path input pin D_32b[21] to DFFPOSX1_2/D delay 192.717 ps
Path input pin D_32b[17] to DFFPOSX1_7/D delay 192.717 ps
Path input pin D_32b[13] to DFFPOSX1_27/D delay 192.717 ps
Path input pin D_32b[9] to DFFPOSX1_32/D delay 192.717 ps
Path input pin D_32b[5] to DFFPOSX1_12/D delay 192.717 ps
Path input pin D_32b[1] to DFFPOSX1_37/D delay 192.717 ps
Path input pin D_32b[28] to DFFPOSX1_16/D delay 195.106 ps
Path input pin D_32b[24] to DFFPOSX1_21/D delay 195.106 ps
Path input pin D_32b[20] to DFFPOSX1_1/D delay 195.106 ps
Path input pin D_32b[16] to DFFPOSX1_6/D delay 195.106 ps
Path input pin D_32b[12] to DFFPOSX1_26/D delay 195.106 ps
Path input pin D_32b[8] to DFFPOSX1_31/D delay 195.106 ps
Path input pin D_32b[4] to DFFPOSX1_11/D delay 195.106 ps
-----------------------------------------

